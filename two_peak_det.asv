clear
clc
close all

%% two oscillation's frequency parameters
oscCenter1 = 10.54; % hard coded 
oscCenter2 = 10.56; % hard coded
sampleRate = 1000; % hard coded
nyq = sampleRate/2;
sampleSpacing = 1/sampleRate;
phaseOffsets = 0:(pi/8):2*pi; % hard coded
% phaseOffsets = 0;
nPhaseOffsets = length(phaseOffsets);
% dataLengthGens = 1:11; % hard coded, 11 data lengths
% dataLengthGens = 1:0.5:10;
dataLengthGens = 1:0.5:11;
dataLengthSecs = round((0.05*2.^dataLengthGens),2); % in seconds hard coded
nDataLengths = length(dataLengthSecs);
% plot(dataLengths, 'o')
nfft = 100*sampleRate;

diffo = mean([oscCenter1,oscCenter2]);
thetamid=diffo*2*pi*sampleSpacing;
th=linspace(0,2*pi,nfft);
focal_th = th(1000:1100);
freqs = (th(1:nfft/2)/sampleSpacing)/(2*pi);
focal_freqs = freqs(1000:1100);
windowLengthPercs = (5:10:75)./100;
overlapPercs = (10:10:70)./100;

%% Run params
% run_fft = 1;
% run_welch = 1;
% run_med_welch = 1;
% run_music = 1;
% run_esprit = 1;
% run_burg = 1;
% run_mem = 1;
% run_envlp = 1;
run_fft = 0;
run_welch = 0;
run_med_welch = 0;
run_music = 0;
run_esprit = 0;
run_burg = 0;
run_mem = 0;
run_envlp = 0;

plot_fft = 1;
plot_welch = 1;
plot_med_welch = 1;
plot_music = 0;
plot_esprit = 0;
plot_burg = 0;
plot_mem = 0;
plot_envlp = 0;

plot_errors = 0;
plot_rts = 0;

%% FFT
if run_fft
	dataLength_errors = [];
	dataLength_rts = [];
	for dataLengthSec = dataLengthSecs;
		phaseOffset_errors = [];
		phaseOffset_rts = [];
		for phaseOffset = phaseOffsets;
			dataLengthSamples = dataLengthSec*sampleRate;
			[osc1,t] = chan_osc(dataLengthSamples, sampleRate,oscCenter1,'phaseOffset',phaseOffset);
			osc2 = chan_osc(dataLengthSamples, sampleRate,oscCenter2);
			data = osc1+osc2;
			fft_freqs = linspace(0,nyq,floor(nfft/2)+1);

			tic
			dataX = fft(data,nfft)/dataLengthSamples;
			dataX = dataX(1:length(fft_freqs)); %keep only positive frequencies
			phaseOffset_rt = toc;
			amp = 2*abs(dataX);
			phaseOffset_error = peak_det_mse(fft_freqs,amp,[oscCenter1,oscCenter2], [1000,1100]);

			phaseOffset_errors = [phaseOffset_errors phaseOffset_error];
			phaseOffset_rts = [phaseOffset_rts phaseOffset_rt];
		end

		% (length(dataLength_errors)) x (length(phaseOffsets)) matrix
		dataLength_errors = [dataLength_errors; phaseOffset_errors];
		dataLength_rts = [dataLength_rts; phaseOffset_rts];
	end

	fft_errors = dataLength_errors;
	fft_rts = dataLength_rts;
	save('fft_errors.mat','fft_errors');
	save('fft_rts.mat','fft_rts');
end
if plot_fft
	close all
	load fft_errors.mat
	min_fft_errors = squeeze(min(fft_errors,[],2));
	createfigure(dataLengthSecs,min_fft_errors, 'o', [0 0 1]);
	title('FFT Min Error over Parameter Space', 'FontSize', 22)
	ylabel('Mean-Squared Error', 'FontSize', 18)
	xlabel('Data Length (sec)', 'FontSize', 18)
	saveas(gcf, 'FFT Min' , 'tif')

	mean_fft_errors = squeeze(mean(fft_errors,2));
	createfigure(dataLengthSecs,mean_fft_errors, 'o', [1 0 0]);
	title('FFT Mean Error over Parameter Space', 'FontSize', 22)
	ylabel('Mean-Squared Error', 'FontSize', 18)
	xlabel('Data Length (sec)', 'FontSize', 18)
	saveas(gcf, 'FFT Mean' , 'tif')
	
% 	std_fft_errors = squeeze(std(fft_errors,[],2));
% 	createfigure(dataLengthSecs,std_fft_errors, 'o', [0 1 1]);
% 	title('Std Dev over Parameter Space', 'FontSize', 24)
% 	ylabel('Mean-Squared Error', 'FontSize', 18)
% 	xlabel('Data Length (sec)', 'FontSize', 18)
% 	saveas(gcf, 'FFT STD' , 'tif')
% 	
% 	cv_fft_errors = std_fft_errors./mean_fft_errors;
% 	cv_fft_errors(isnan(cv_fft_errors)) = 0;
% 	createfigure(dataLengthSecs,cv_fft_errors, 'o', [0 0 1]);
% 	title('Coeff of Variation over Parameter Space', 'FontSize', 24)
% 	ylabel('Mean-Squared Error', 'FontSize', 18)
% 	xlabel('Data Length (sec)', 'FontSize', 18)
% 	saveas(gcf, 'FFT CV' , 'tif')
	
	fs = findall(0,'type','figure');
	for i = 1:length(fs)
		jFrame = get(handle(fs(i)),'JavaFrame');
		pause(0.1)  %//This is important
		jFrame.setMinimized(true);
	end
end

%% Welch
if run_welch
	start_welch = tic;
	dataLength_errors = []; % length is equal to length(welch_dls)
	dataLength_rts = []; % length is equal to length(welch_dls)

	for dataLengthSec = dataLengthSecs % defined for all methods at the top
		dataLengthSamples = dataLengthSec*sampleRate
		windowLength_errors = []; % length equal to length(dls_wls)
		windowLength_rts = []; % length equal to length(dls_wls)
		windowLengthsSamples = round(windowLengthPercs*dataLengthSamples);

		for windowLengthSamples = windowLengthsSamples;
			phaseOffset_errors = [];
			phaseOffset_rts = [];
			nOverlaps = round(overlapPercs.*windowLengthSamples);
			for phaseOffset = phaseOffsets % defined for all methods at the top
				nOverlap_errors = [];
				nOverlap_rts = [];
				osc1 = chan_osc(dataLengthSamples, sampleRate,oscCenter1,'phaseOffset',phaseOffset);
				osc2 = chan_osc(dataLengthSamples, sampleRate,oscCenter2);
				data = osc1+osc2;
				for nOverlap = nOverlaps
					tic
					[pow, welch_f] = pwelch(data,windowLengthSamples,nOverlap,nfft,sampleRate, 'power', 'onesided');
					nOverlap_rt = toc;
					amp = sqrt(pow);
					nOverlap_error = peak_det_mse(welch_f,amp,[oscCenter1,oscCenter2], [1000,1100]);
					nOverlap_errors = cat(1,nOverlap_errors, nOverlap_error);
					nOverlap_rts= cat(1,nOverlap_rts, nOverlap_rt);
				end
				phaseOffset_errors = cat(2,phaseOffset_errors, nOverlap_errors);
				phaseOffset_rts = cat(2,phaseOffset_rts, nOverlap_rts);
			end
			windowLength_errors = cat(3,windowLength_errors, phaseOffset_errors);
			windowLength_rts = cat(3,windowLength_rts, phaseOffset_rts);
		end
		
		% creates  nOverlap (7) x  phaseOffset (13) x
		% windowLength(7) x dataLengthSecs(11)
		dataLength_errors = cat(4,dataLength_errors, windowLength_errors);
		dataLength_rts= cat(4,dataLength_rts, windowLength_rts);
	end
	welch_errors = dataLength_errors;
	welch_rts = dataLength_rts;

	save('welch_errors.mat','welch_errors');
	save('welch_rts.mat','welch_rts');
	welch_run = toc(start_welch);
	['Welch runtime:', num2str(welch_run)]
end

%%
if plot_welch
	close all
	load welch_errors.mat
	min_welch_errors = squeeze(min(min(min(welch_errors,[],2))));
	createfigure(dataLengthSecs,min_welch_errors, 'o', [0 0 1]);
	title('Welch Min Error over Parameter Space', 'FontSize', 22)
	ylabel('Mean-Squared Error', 'FontSize', 16)
	xlabel('Data Length (sec)', 'FontSize', 16)
	saveas(gcf, 'welch Min' , 'tif')

	mean_welch_errors = squeeze(mean(mean(mean(welch_errors))));
	createfigure(dataLengthSecs,mean_welch_errors, 'o', [1 0 0]);
	title('Welch Mean Error over Parameter Space', 'FontSize', 22)
	ylabel('Mean-Squared Error', 'FontSize', 16)
	xlabel('Data Length (sec)', 'FontSize', 16)
	saveas(gcf, 'welch Mean' , 'tif')
	
% 	std_welch_errors = squeeze(std(std(std(welch_errors))));
% 	createfigure(dataLengthSecs,std_welch_errors, 'o', [0 1 1]);
% 	title('Std Dev over Parameter Space', 'FontSize', 22)
% 	ylabel('Mean-Squared Error', 'FontSize', 16)
% 	xlabel('Data Length (sec)', 'FontSize', 16)
% 	saveas(gcf, 'welch STD' , 'tif')
% 	
% 	cv_welch_errors = std_welch_errors./mean_welch_errors;
% 	cv_welch_errors(isnan(cv_welch_errors)) = 0;
% 	createfigure(dataLengthSecs,cv_welch_errors, 'o', [1 1 0]);
% 	title('Coeff of Variation over Parameter Space', 'FontSize', 22)
% 	ylabel('Mean-Squared Error', 'FontSize', 16)
% 	xlabel('Data Length (sec)', 'FontSize', 16)
% 	saveas(gcf, 'welch CV' , 'tif')
	
	fs = findall(0,'type','figure');
	for i = 1:length(fs)
		jFrame = get(handle(fs(i)),'JavaFrame');
		pause(0.1)  %//This is important
		jFrame.setMinimized(true);
	end
end

%% Med Welch
if run_med_welch
	start_med_welch = tic;
	dataLength_errors = [];
	dataLength_rts = [];
	for dataLengthSec = dataLengthSecs
		dataLengthSamples = dataLengthSec*sampleRate
		windowLength_errors = [];
		windowLength_rts = [];
		windowLengthsSamples = round(windowLengthPercs*dataLengthSamples);
		for windowLengthSamples = windowLengthsSamples;
			phaseOffset_errors = [];
			phaseOffset_rts = [];
			nOverlaps = round(overlapPercs.*windowLengthSamples);
			for phaseOffset = phaseOffsets
				nOverlap_errors = [];
				nOverlap_rts = [];
				osc1 = chan_osc(dataLengthSamples, sampleRate,oscCenter1,'phaseOffset',phaseOffset);
				osc2 = chan_osc(dataLengthSamples, sampleRate,oscCenter2);
				data = osc1+osc2;
				for nOverlap = nOverlaps
					tic
					[pow, welch_f] = med_pwelch(data,windowLengthSamples,nOverlap,nfft,sampleRate);
					nOverlap_rt = toc;
					amp = sqrt(pow);
					nOverlap_error = peak_det_mse(welch_f,amp,[oscCenter1,oscCenter2],[1000,1100]);
					nOverlap_errors = cat(1,nOverlap_errors, nOverlap_error);
					nOverlap_rts= cat(1,nOverlap_rts, nOverlap_rt);
				end
				phaseOffset_errors = cat(2,phaseOffset_errors, nOverlap_errors);
				phaseOffset_rts = cat(2,phaseOffset_rts, nOverlap_rts);
			end
			windowLength_errors = cat(3,windowLength_errors, phaseOffset_errors);
			windowLength_rts = cat(3,windowLength_rts, phaseOffset_rts);
		end
		dataLength_errors = cat(4,dataLength_errors, windowLength_errors);
		dataLength_rts= cat(4,dataLength_rts, windowLength_rts);
	end
	med_welch_errors = dataLength_errors;
	med_welch_rts = dataLength_rts;

	save('med_welch_errors.mat','med_welch_errors');
	save('med_welch_rts.mat','med_welch_rts');
	med_welch_run = toc(start_med_welch);
	['Med Welch runtime:', num2str(med_welch_run)]
end

%%
if plot_med_welch
	close all
	load med_welch_errors.mat
	min_med_welch_errors = squeeze(min(min(min(med_welch_errors,[],2))));
	createfigure(dataLengthSecs,min_med_welch_errors, 'o', [0 0 1]);
	
	title('Med-Welch Min Overall Error', 'FontSize', 22)
	ylabel('Mean-Squared Error', 'FontSize', 16)
	xlabel('Data Length (sec)', 'FontSize', 16)
	saveas(gcf, 'med_welch Min' , 'tif')

	mean_med_welch_errors = squeeze(mean(mean(mean(med_welch_errors))));
	createfigure(dataLengthSecs,mean_med_welch_errors, 'o', [1 0 0]);
	title('Med-Welch Mean Error over Parameter Space', 'FontSize', 22)
	ylabel('Mean-Squared Error', 'FontSize', 16)
	xlabel('Data Length (sec)', 'FontSize', 16)
	saveas(gcf, 'med_welch Mean' , 'tif')
	
% 	std_med_welch_errors = squeeze(std(std(std(med_welch_errors))));
% 	createfigure(dataLengthSecs,std_med_welch_errors, 'o', [0 1 1]);
% 	title('Std Dev over Parameter Space', 'FontSize', 22)
% 	ylabel('Mean-Squared Error', 'FontSize', 16)
% 	xlabel('Data Length (sec)', 'FontSize', 16)
% 	saveas(gcf, 'med_welch STD' , 'tif')
% 	
% 	cv_med_welch_errors = std_med_welch_errors./mean_med_welch_errors;
% 	cv_med_welch_errors(isnan(cv_med_welch_errors)) = 0;
% 	createfigure(dataLengthSecs,cv_med_welch_errors, 'o', [1 1 1]);
% 	title('Coeff of Variation over Parameter Space', 'FontSize', 22)
% 	ylabel('Mean-Squared Error', 'FontSize', 16)
% 	xlabel('Data Length (sec)', 'FontSize', 16)
% 	saveas(gcf, 'med_welch CV' , 'tif')
	
	fs = findall(0,'type','figure');
	for i = 1:length(fs)
		jFrame = get(handle(fs(i)),'JavaFrame');
		pause(0.1)  %//This is important
		jFrame.setMinimized(true);
	end
end

%% MUSIC
if run_music
	dataLength_errors = [];
	dataLength_rts = [];
	for dataLengthSec = dataLengthSecs;
		dataLengthSamples = dataLengthSec*sampleRate;
		phaseOffset_errors = [];
		phaseOffset_rts = [];
		for phaseOffset = phaseOffsets;
			[osc1,t] = chan_osc(dataLengthSamples, sampleRate,oscCenter1,'phaseOffset',phaseOffset);
			osc2 = chan_osc(dataLengthSamples, sampleRate,oscCenter2);
			data = osc1+osc2;
			tic
			[S,freqs] = pmusic(data,4,nfft,sampleRate, 'onesided');
			phaseOffset_rt = toc;
			phaseOffset_error = peak_det_mse(freqs,S,[oscCenter1,oscCenter2],[1000,1100]);
			
			phaseOffset_errors = [phaseOffset_errors phaseOffset_error];
			phaseOffset_rts = [phaseOffset_rts phaseOffset_rt];
		end
		
		% (length(dataLength_errors)) x (length(phaseOffsets)) matrices
		dataLength_errors = [dataLength_errors; phaseOffset_errors];
		dataLength_rts = [dataLength_rts; phaseOffset_rts];
	end
	music_errors = dataLength_errors;
	music_rts = dataLength_rts;
	
	save('music_errors.mat','music_errors');
	save('music_rts.mat','music_rts');
end

%% eSPRIT
if run_esprit
	dataLength_errors = [];
	dataLength_rts = [];
	for dataLengthSec = dataLengthSecs;
		dataLengthSamples = dataLengthSec*sampleRate
		phaseOffset_errors = [];
		phaseOffset_rts = [];
		for phaseOffset = phaseOffsets;
			[osc1,t] = chan_osc(dataLengthSamples, sampleRate,oscCenter1,'phaseOffset',phaseOffset);
			osc2 = chan_osc(dataLengthSamples, sampleRate,oscCenter2);
			data = osc1+osc2;
			order_errors = [];
			order_rts = [];
			for order = 16:4:48
				tic
				w=esprit(data,4,order);
				sorted_w = sort((w/sampleSpacing)/(2*pi),'descend');
				freqs = sorted_w(1:2);
				order_rt = toc;

				order_error = peak_det_mse(freqs,[1,1],[oscCenter1,oscCenter2],[1,2]);
				order_errors = cat(1,order_errors, order_error);
				order_rts = cat(1,order_rts, order_rt);
			end
			phaseOffset_errors = cat(2,phaseOffset_errors, order_errors);
			phaseOffset_rts = cat(2,phaseOffset_rts, order_rts);

		end
		
		% (length(dataLength_errors)) x (length(phaseOffsets)) matrices
		dataLength_errors = cat(3,dataLength_errors, phaseOffset_errors);
		dataLength_rts = cat(3,dataLength_rts, phaseOffset_rts);
	end
	esprit_errors = dataLength_errors;
	esprit_rts = dataLength_rts;
	
	save('esprit_errors.mat','esprit_errors');
	save('esprit_rts.mat','esprit_rts');
end

%% Spectral envelope
if run_envlp
	dataLength_errors = [];
	dataLength_rts = [];
	for dataLengthSec = dataLengthSecs;
		dataLengthSamples = dataLengthSec*sampleRate
		phaseOffset_errors = [];
		phaseOffset_rts = [];
		for phaseOffset = phaseOffsets;
			phaseOffset
			[osc1,t] = chan_osc(dataLengthSamples, sampleRate,oscCenter1,'phaseOffset',phaseOffset);
			osc2 = chan_osc(dataLengthSamples, sampleRate,oscCenter2);
			data = osc1+osc2;
			neigs_errors = [];
			neigs_rts = [];
			for neigs = 8:16
				
				radius_errors = [];
				radius_rts = [];
				for radius = 0.9:0.01:0.99
% 					[num2str(dataLengthSamples),', ',num2str(phaseOffset),', ',num2str(radius),', ',num2str(neigs)]
					tic
					[A,B] = cjordan(neigs,radius*exp(thetamid*1i));
					R = dlsim_complex(A,B,data); %needs row vector
					rhofull = envlp(R,A,B,focal_th);
 					rhohalf = rhofull;
 					rho = rhohalf.^2; %if actually want power, do this
					
					radius_rt = toc;
% 					radius_error = peak_det_mse(focal_freqs,rho,[oscCenter1,oscCenter2]);
					radius_error = peak_det_mse(focal_freqs,rho,[oscCenter1,oscCenter2], [1,length(focal_th)]);
					
					radius_errors = cat(1,radius_errors, radius_error);
					radius_rts = cat(1,radius_rts, radius_rt);
				end
				neigs_errors = cat(2,neigs_errors, radius_errors);
				neigs_rts = cat(2,neigs_rts, radius_rts);
			end
			phaseOffset_errors = cat(3,phaseOffset_errors, neigs_errors);
			phaseOffset_rts = cat(3,phaseOffset_rts, neigs_rts);

		end
		
		% (length(dataLength_errors)) x (length(phaseOffsets)) x length(orders) matrices
		dataLength_errors = cat(4,dataLength_errors, phaseOffset_errors);
		dataLength_rts = cat(4,dataLength_rts, phaseOffset_rts);
	end
	envl_errors = dataLength_errors;
	envl_rts = dataLength_rts;
	
	save('envl_errors.mat','envl_errors');
	save('envl_rts.mat','envl_rts');
end

%% Burg
if run_burg
	dataLength_errors = [];
	dataLength_rts = [];
	for dataLengthSec = dataLengthSecs
		dataLengthSec
		order_errors = [];
		order_rts = [];
		orders = 3:2:25;
		for order = orders
			phaseOffset_errors = [];
			phaseOffset_rts = [];
			for phaseOffset = phaseOffsets;
				dataLengthSamples = dataLengthSec*sampleRate;
				[osc1,t] = chan_osc(dataLengthSamples, sampleRate,oscCenter1,'phaseOffset',phaseOffset);
				osc2 = chan_osc(dataLengthSamples, sampleRate,oscCenter2);
				data = osc1+osc2;

				tic
				[S,freqs] = pburg(data,order,nfft,sampleRate, 'onesided');
				phaseOffset_rt = toc;

				phaseOffset_error = peak_det_mse(freqs,S,[oscCenter1,oscCenter2], [1000,1100]);

				phaseOffset_errors = cat(1,phaseOffset_errors,phaseOffset_error);
				phaseOffset_rts = cat(1,phaseOffset_rts, phaseOffset_rt);
			end
			order_errors = cat(2,order_errors,phaseOffset_errors);
			order_rts = cat(2,order_rts, phaseOffset_rts);
		end
		% (length(dataLength_errors)) x (length(phaseOffsets)) matrices
		dataLength_errors = cat(3,dataLength_errors, order_errors);
		dataLength_rts = cat(3,dataLength_rts, order_rts);
	end
	burg_errors = dataLength_errors;
	burg_rts = dataLength_rts;
	
	save('burg_errors.mat','burg_errors');
	save('burg_rts.mat','burg_rts');
end

%% Maximum Entropy Method
if run_mem
	dataLength_errors = [];
	dataLength_rts = [];
	for dataLengthSec = dataLengthSecs
		dataLengthSec
		order_errors = [];
		order_rts = [];
		orders = 2:10;
		for order = orders
			phaseOffset_errors = [];
			phaseOffset_rts = [];
			for phaseOffset = phaseOffsets;
				dataLengthSamples = dataLengthSec*sampleRate;
				[osc1,t] = chan_osc(dataLengthSamples, sampleRate,oscCenter1,'phaseOffset',phaseOffset);
				osc2 = chan_osc(dataLengthSamples, sampleRate,oscCenter2);
				data = osc1+osc2;

				tic
				[S,freqs] = pmem(data,order,nfft,sampleRate, 'onesided');
				phaseOffset_rt = toc;

				phaseOffset_error = peak_det_mse(freqs,S,[oscCenter1,oscCenter2], [1000,1100]);

				phaseOffset_errors = cat(1,phaseOffset_errors,phaseOffset_error);
				phaseOffset_rts = cat(1,phaseOffset_rts, phaseOffset_rt);
			end
			order_errors = cat(2,order_errors,phaseOffset_errors);
			order_rts = cat(2,order_rts, phaseOffset_rts);
		end
		% (length(dataLength_errors)) x (length(phaseOffsets)) matrices
		dataLength_errors = cat(3,dataLength_errors, order_errors);
		dataLength_rts = cat(3,dataLength_rts, order_rts);
	end
	mem_errors = dataLength_errors;
	mem_rts = dataLength_rts;
	
	save('mem_errors.mat','mem_errors');
	save('mem_rts.mat','mem_rts');
end

%%
% close all
% for method = {'fft','welch','music','burg','mem'}
% 	for measure = {'_errors','_rts'}
% 		eval(['load ', method{1},measure{1},'.mat'])
% 	end
% end
% for measure = {'_errors','_rts'}
% 	for stat = {'min', 'max', 'median', 'mean', 'std','cv'}
% 		[stat{1},'_welch',measure{1},' = squeeze(',stat{1},'(',stat{1},'(',stat{1},'(welch', measure{1},'))));']
% 		[stat{1},'_welch',measure{1},' = squeeze(',stat{1},'(',stat{1},'(',stat{1},'(welch', measure{1},'))));']
% 		[stat{1},'_welch',measure{1},' = squeeze(',stat{1},'(',stat{1},'(',stat{1},'(welch', measure{1},'))));']
% 		[stat{1},'_welch',measure{1},' = squeeze(',stat{1},'(',stat{1},'(',stat{1},'(welch', measure{1},'))));']
% 	end
% % 	figure; hold on
% end

%% Plot errors
if plot_errors
	close all
	
	load welch_errors.mat
	load med_welch_errors.mat
	load music_errors.mat
	load esprit_errors.mat
	load burg_errors.mat
	load mem_errors.mat
	load envl_errors.mat

	% Minimum
	figure; hold on;
	min_fft_errors = squeeze(min(fft_errors,[],2));
	min_welch_errors = squeeze(min(min(min(welch_errors))));
	min_med_welch_errors = squeeze(min(min(min(med_welch_errors))));
	min_music_errors = squeeze(min(music_errors,[],2));
	min_esprit_errors = squeeze(min(min(esprit_errors)));
	min_burg_errors = squeeze(min(min(burg_errors)));
	min_mem_errors = squeeze(min(min(mem_errors)));
	min_envl_errors = squeeze(min(min(min(envl_errors))));
	plot(log(dataLengthSecs),min_fft_errors, 'b-o')
	plot(log(dataLengthSecs),min_welch_errors, 'r-+')
	plot(log(dataLengthSecs),min_med_welch_errors, 'c-+')
	plot(log(dataLengthSecs),min_music_errors, 'k:v')
	plot(log(dataLengthSecs),min_esprit_errors, 'y:v')
	plot(log(dataLengthSecs),min_burg_errors, 'm--')
	plot(log(dataLengthSecs),min_mem_errors, 'g--')
	plot(log(dataLengthSecs),min_envl_errors, 'k--')
	figure1 = figure;
	set(figure1, 'Units', 'inches');
	set(figure1, 'Position', [0 0 6 4].*2);
	set(figure1, 'PaperUnits', 'inches');
	set(figure1, 'PaperPosition', [0 0 6 4].*2);
	% Create axes
	axes1 = axes('Parent',figure1);
	hold(axes1,'on');
	
% 	legend('FFT','Welch', 'Med Welch', 'MUSIC', 'esprit', 'Burg', 'Max Ent', 'Spectral Envl')
% 	title('Minimum')
%  	ylim([0,0.0002])
	
	% Median
	figure; hold on;
	median_fft_errors = squeeze(median(fft_errors,2));
	median_welch_errors = squeeze(median(median(median(welch_errors))));
	median_med_welch_errors = squeeze(median(median(median(med_welch_errors))));
	median_music_errors = squeeze(median(music_errors,2));
	median_esprit_errors = squeeze(median(median(esprit_errors)));
	median_burg_errors = squeeze(median(median(burg_errors)));
	median_mem_errors = squeeze(median(median(mem_errors)));
	plot(log(dataLengthSecs),log(median_fft_errors), 'b-o')
	plot(log(dataLengthSecs),log(median_welch_errors), 'r-+')
	plot(log(dataLengthSecs),log(median_med_welch_errors), 'c-+')
	plot(log(dataLengthSecs),log(median_music_errors), 'k:v')
	plot(log(dataLengthSecs),log(median_esprit_errors), 'y:^')
	plot(log(dataLengthSecs),log(median_burg_errors), 'm--')
	plot(log(dataLengthSecs),log(median_mem_errors), 'g--')
	legend('FFT','Welch', 'Med Welch', 'MUSIC', 'esprit', 'Burg', 'Max Ent')
	title('Median')
% 	ylim([0,0.0005])

	% Mode
	figure; hold on;
	mode_fft_errors = squeeze(mode(fft_errors,2));
	mode_welch_errors = squeeze(mode(mode(mode(welch_errors))));
	mode_med_welch_errors = squeeze(mode(mode(mode(med_welch_errors))));
	mode_music_errors = squeeze(mode(music_errors,2));
	mode_esprit_errors = squeeze(mode(mode(esprit_errors)));
	mode_burg_errors = squeeze(mode(mode(burg_errors)));
	mode_mem_errors = squeeze(mode(mode(mem_errors)));
	plot(log(dataLengthSecs),mode_fft_errors, 'b-o')
	plot(log(dataLengthSecs),mode_welch_errors, 'r-+')
	plot(log(dataLengthSecs),mode_med_welch_errors, 'c-+')
	plot(log(dataLengthSecs),mode_music_errors, 'k:v')
	plot(log(dataLengthSecs),mode_esprit_errors, 'y:v')
	plot(log(dataLengthSecs),mode_burg_errors, 'm--')
	plot(log(dataLengthSecs),mode_mem_errors, 'g--')
	legend('FFT','Welch', 'Med Welch', 'MUSIC', 'esprit', 'Burg', 'Max Ent')
	title('Mode')
	ylim([0,0.0005])

	% Max
	figure; hold on;
	max_fft_errors = squeeze(max(fft_errors,[],2));
	max_welch_errors = squeeze(max(max(max(welch_errors))));
	max_med_welch_errors = squeeze(max(max(max(med_welch_errors))));
	max_music_errors = squeeze(max(music_errors,[],2));
	max_esprit_errors = squeeze(max(max(esprit_errors)));
	max_burg_errors = squeeze(max(max(burg_errors)));
	max_mem_errors = squeeze(max(max(mem_errors)));
	plot(log(dataLengthSecs),max_fft_errors, 'b-o')
	plot(log(dataLengthSecs),max_welch_errors, 'r-+')
	plot(log(dataLengthSecs),max_med_welch_errors, 'c-+')
	plot(log(dataLengthSecs),max_music_errors, 'k:v')
	plot(log(dataLengthSecs),max_esprit_errors, 'y:v')
	plot(log(dataLengthSecs),max_burg_errors, 'm--')
	plot(log(dataLengthSecs),max_mem_errors, 'g--')
	legend('FFT','Welch', 'Med Welch', 'MUSIC', 'esprit', 'Burg', 'Max Ent')
	title('Maximum')
% 	ylim([0,0.0005])

	% Mean
	
	mean_welch_errors = squeeze(mean(mean(mean(welch_errors))));
	mean_med_welch_errors = squeeze(mean(mean(mean(med_welch_errors))));
	mean_music_errors = squeeze(mean(music_errors,2));
	mean_esprit_errors = squeeze(mean(mean(esprit_errors)));
	mean_burg_errors = squeeze(mean(mean(burg_errors)));
	mean_mem_errors = squeeze(mean(mean(mem_errors)));
	
	plot(log(dataLengthSecs),mean_welch_errors, 'r-+')
	plot(log(dataLengthSecs),mean_med_welch_errors, 'c-+')
	plot(log(dataLengthSecs),mean_music_errors, 'k:v')
	plot(log(dataLengthSecs),mean_esprit_errors, 'y:v')
	plot(log(dataLengthSecs),mean_burg_errors, 'm--')
	plot(log(dataLengthSecs),mean_mem_errors, 'g--')
	legend('FFT','Welch', 'Med Welch', 'MUSIC', 'esprit', 'Burg', 'Max Ent')
	title('Mean')
% 	ylim([0,0.0005])

	% STD
	figure; hold on;
	std_fft_errors = squeeze(std(fft_errors,[],2));
	std_welch_errors = squeeze(std(std(std(welch_errors))));
	std_med_welch_errors = squeeze(std(std(std(med_welch_errors))));
	std_music_errors = squeeze(std(music_errors,[],2));
	std_esprit_errors = squeeze(std(std(esprit_errors)));
	std_burg_errors = squeeze(std(std(burg_errors)));
	std_mem_errors = squeeze(std(std(mem_errors)));
	plot(log(dataLengthSecs),std_fft_errors, 'b-o')
	plot(log(dataLengthSecs),std_welch_errors, 'r-+')
	plot(log(dataLengthSecs),std_med_welch_errors, 'c-+')
	plot(log(dataLengthSecs),std_music_errors, 'k:v')
	plot(log(dataLengthSecs),std_esprit_errors, 'y:v')
	plot(log(dataLengthSecs),std_burg_errors, 'm--')
	plot(log(dataLengthSecs),std_mem_errors, 'g--')
	legend('FFT','Welch', 'Med Welch', 'MUSIC', 'esprit', 'Burg', 'Max Ent')
	title('STD')
	ylim([0,0.0005])

	% Quart Coeff of Disp
	figure; hold on;
	fft_errors_q3 = quantile(fft_errors,0.75,2);
	welch_errors_q3 = squeeze(quantile(quantile(quantile(welch_errors,0.75,3),0.75,2),0.75,1));
	med_welch_errors_q3 = squeeze(quantile(quantile(quantile(med_welch_errors,0.75,3),0.75,2),0.75,1));
	music_errors_q3 = quantile(music_errors,0.75,2);
	esprit_errors_q3 = squeeze(quantile(quantile(esprit_errors,0.75,2),0.75,1));
	burg_errors_q3 = squeeze(quantile(quantile(burg_errors,0.75,2),0.75,1));
	mem_errors_q3 = squeeze(quantile(quantile(mem_errors,0.75,2),0.75,1));
	fft_errors_q1 = quantile(fft_errors,0.25,2);
	welch_errors_q1 = squeeze(quantile(quantile(quantile(welch_errors,0.25,3),0.25,2),0.25,1));
	med_welch_errors_q1 = squeeze(quantile(quantile(quantile(med_welch_errors,0.25,3),0.25,2),0.25,1));
	music_errors_q1 = quantile(music_errors,0.25,2);
	esprit_errors_q1 = squeeze(quantile(quantile(esprit_errors,0.25,2),0.25,1));
	burg_errors_q1 = squeeze(quantile(quantile(burg_errors,0.25,2),0.25,1));
	mem_errors_q1 = squeeze(quantile(quantile(mem_errors,0.25,2),0.25,1));
	qcd_fft_errors = (fft_errors_q3-fft_errors_q1)./(fft_errors_q3+fft_errors_q1);
	qcd_welch_errors = (welch_errors_q3-welch_errors_q1)./(welch_errors_q3+welch_errors_q1);
	qcd_med_welch_errors = (med_welch_errors_q3-med_welch_errors_q1)./(med_welch_errors_q3+med_welch_errors_q1);
	qcd_music_errors = (music_errors_q3-music_errors_q1)./(music_errors_q3+music_errors_q1);
	qcd_esprit_errors = (esprit_errors_q3-esprit_errors_q1)./(esprit_errors_q3+esprit_errors_q1);
	qcd_burg_errors = (burg_errors_q3-burg_errors_q1)./(burg_errors_q3+burg_errors_q1);
	qcd_mem_errors = (mem_errors_q3-mem_errors_q1)./(mem_errors_q3+mem_errors_q1);
	qcd_fft_errors(isnan(qcd_fft_errors)) = 0;
	qcd_welch_errors(isnan(qcd_welch_errors)) = 0;
	qcd_med_welch_errors(isnan(qcd_welch_errors)) = 0;
	qcd_music_errors(isnan(qcd_music_errors)) = 0;
	qcd_esprit_errors(isnan(qcd_esprit_errors)) = 0;
	qcd_burg_errors(isnan(qcd_burg_errors)) = 0;
	qcd_mem_errors(isnan(qcd_mem_errors)) = 0;
	plot(log(dataLengthSecs),qcd_fft_errors, 'b-o')
	plot(log(dataLengthSecs),qcd_welch_errors, 'r-+')
	plot(log(dataLengthSecs),qcd_med_welch_errors, 'c-+')
	plot(log(dataLengthSecs),qcd_music_errors, 'k:v')
	plot(log(dataLengthSecs),qcd_esprit_errors, 'y:v')
	plot(log(dataLengthSecs),qcd_burg_errors, 'm--')
	plot(log(dataLengthSecs),qcd_mem_errors, 'g--')
	legend('FFT','Welch', 'Med Welch', 'MUSIC', 'esprit', 'Burg', 'Max Ent')
	title('Quartile Coeff of Dispersioon')
	
	% CV
	figure; hold on;
	cv_fft_errors = std_fft_errors./mean_fft_errors;
	cv_welch_errors = std_welch_errors./mean_welch_errors;
	cv_med_welch_errors = std_med_welch_errors./mean_med_welch_errors;
	cv_music_errors = std_music_errors./mean_music_errors;
	cv_esprit_errors = std_esprit_errors./mean_esprit_errors;
	cv_burg_errors = std_burg_errors./mean_burg_errors;
	cv_mem_errors = std_mem_errors./mean_mem_errors;
	cv_fft_errors(isnan(cv_fft_errors)) = 0;
	cv_welch_errors(isnan(cv_welch_errors)) = 0;
	cv_med_welch_errors(isnan(cv_welch_errors)) = 0;
	cv_music_errors(isnan(cv_music_errors)) = 0;
	cv_esprit_errors(isnan(cv_esprit_errors)) = 0;
	cv_burg_errors(isnan(cv_burg_errors)) = 0;
	cv_mem_errors(isnan(cv_mem_errors)) = 0;
	plot(log(dataLengthSecs),cv_fft_errors, 'b-o')
	plot(log(dataLengthSecs),cv_welch_errors, 'r-+')
	plot(log(dataLengthSecs),cv_med_welch_errors, 'c-+')
	plot(log(dataLengthSecs),cv_music_errors, 'k:v')
	plot(log(dataLengthSecs),cv_esprit_errors, 'y:v')
	plot(log(dataLengthSecs),cv_burg_errors, 'm--')
	plot(log(dataLengthSecs),cv_mem_errors, 'g--')
	legend('FFT','Welch', 'Med Welch', 'MUSIC', 'esprit', 'Burg', 'Max Ent')
	title('Coeff of Variation')
end
